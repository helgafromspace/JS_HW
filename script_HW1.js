'number' + 3 + 3
// результат -  'number33'; 'number' - строка, додавши до якої 3(яка є числом з типом number), отримаємо теж строку 'number3'; потім проводимо аналогічну операцію - 'number3' (string) + 3(number), отримуємо 'number33'

null + 3
// результат 3; null, по суті нульове значення, приводиться до 0 та додається до 3, як число

5 && "qwerty"
//результат - "qwerty"; якщо у виразі з логічним оператором AND обидва значення є true, js повертає другий операнд, який true; якщо 5 замінити на якесь falsy значення то виводило б його

+'40' + +'2' + "hillel"
//результат -  '42hillel'; спочатку строка 40 приводиться до числа та додається з приведеною до числа 2, потім конкатенується зі строкою та отримуємо строку '42hillel';

'10' - 5 === 6;
// результат - false; строкове значення '10' приводиться до числа, віднімається 5, отримуємо 5 як число, яке не дорівнює 6, тому результат false

true + false
// результат - 1; булеве true перетворюється на 1, тоді як false на 0; відповідно, 1 + 0 = 1

'4px' - 3
// результат - NaN; строкове значення '4px' не може бути приведене до числа

'4' - 3
// результат - 1; строкове значення '4' може бути приведене до числа, отже маємо 4 - 3 = 1

'6' + 3 ** 0
// результат 61 (string); приведення до степеня - пріорітетніша операція ніж додавання, тому виконується першим: 3 в степені 0 = 1; у js при додаванні до string числа, число конвертується у строку та конкатенується

12 / '6'
// результат - 2; строкове '6' може бути приведене до числа, тому 12 / 6 = 2

'10' + (5 === 6);
// результат - '10false'(string); спочатку виконується порівняння, яке в дужках - отримуємо false, при конкатенації з строковим значенням '10' булеве false перетворюється на строкове 'false' і поєднується з '10' вже як строка

null == ''
// результат - false; оскільки true повертатиметься тільки у випадку null == null або null == underfined, а '' - це валідна строка(хоч і пуста), що не дорівнюватиме ні null, ні underfined), то маємо false як результат

3 ** (9 / 3);
// результат 27; операція в дужках - пріоритетніша, тому спочатку виконується вона 9/3 = 3; далі - приводимо 3 до степеня 3, отримуємо  27

!!'false' == !!'true'
// результат - true; зліва від == відбувається перетворення: перша логічна інверсія (перший !) - строка 'false' є true(бо вона не порожня), тому логічне НЕ дає булеве false, друга логічна інверсія (друге !) - false стає true; зправа від == те саме; відповідно, true == true дає true

0 || '0' && 1
// результат - 1; спочатку виконується логічне AND бо має вищий пріоритет ніж OR; '0' - не порожня строка, тому вона true, 1 - теж true - отже, якщо обидва значення true - результатом буде останнє значення (1); оператор OR повертає перше true значення, і оскільки 0 - false, результатом буде 1

(+null == false) < 1;
// результат - false; +null приводить значення до 0, яке потім порівнюється з false, яке теж може бути приведено до 0, отже в результаті порівняння (+null == false) отримуємо true; true приводиться до 1, тому нерівність 1 < 1 дасть false

false && true || true
//результат - true; оператор AND (false && true) виконується першим і якщо обидва операнди не true повертається false; логічне OR (false || true) дасть нам true, тому що якщо хоча б один з операндів true то повертається він

false && (false || true)
//результат - false; спочатку виконується оператор OR в дужках (false || true) - якщо хоча б один операнд true - повертається його значення, тобто результатом дії в дужках буде true; в логічному оперторі AND якщо обидва значення не true - повертатиметься false;

(+null == false) < 1 ** 5;
//результат - false; +null приводиться до числа 0, внаслідок порівняння з false(яке теж приводиться до 0) отримаємо true зліва від знаку нерівності; справа 1 в степені 5 дорівнює 1, отже отримуємо true < 1; true приводиться до 1, отже нерівність 1 < 1 дає false